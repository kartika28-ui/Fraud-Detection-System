# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XEcmFenVv9YnhFfzE1_z7lAyTQTWGFIj
"""

import sys
import streamlit as st
import numpy as np
import joblib
import math
import os

st.set_page_config(page_title="Fraud Detection System", page_icon="ðŸ’³", layout="centered")

st.markdown(
    """
    <style>
    .stApp {
        background-color: #f2e8d9; 
    }
    div.stButton > button {
        background-color: #646f58;  
        color: white;                                     
    }
    div.stButton > button:hover {
        background-color: #fff !important;
        color: #646f58 !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)

if not os.path.exists("fraud_detection.pkl"):
    st.error("Model file 'fraud_detection.pkl' not found! Please ensure it's uploaded to your repository.")
    st.stop()

try:
    model = joblib.load("fraud_detection.pkl")
except:
    model = joblib.load("./fraud_detection.pkl")

st.title("ðŸ’³ Real-Time Fraud Detection System")
st.write("Predict whether a transaction is **Fraudulent or Genuine**")

st.subheader("Enter Transaction Details")

col1, col2 = st.columns(2)

with col1:
    type_input = st.selectbox(
        "Transaction Type",
        ["CASH-IN", "CASH-OUT", "DEBIT", "PAYMENT", "TRANSFER"]
    )
    amount = st.number_input("Transaction Amount", min_value=0.0, step=100.0)
    oldbalanceOrg = st.number_input("Sender's Old Balance", min_value=0.0, step=100.0)
    newbalanceOrig = st.number_input("Sender's New Balance", min_value=0.0, step=100.0)

with col2:
    oldbalanceDest = st.number_input("Receiver's Old Balance", min_value=0.0, step=100.0)
    newbalanceDest = st.number_input("Receiver's New Balance", min_value=0.0, step=100.0)


OrigBalanceChange = newbalanceOrig - oldbalanceOrg
DestBalanceChange = newbalanceDest - oldbalanceDest

amount_to_oldOrig = amount / (oldbalanceOrg + 1)
amount_to_oldDest = amount / (oldbalanceDest + 1)

log_amount = math.log1p(amount)

type_map = {"CASH-IN": 0, "CASH-OUT": 1, "DEBIT": 2, "PAYMENT": 3, "TRANSFER": 4}
type_encoded = type_map[type_input]
dest_is_customer = 1
step = 1
balance_mismatch = 0

if type_input == "CASH-IN" and newbalanceOrig < oldbalanceOrg:
    balance_mismatch = 1

elif type_input == "CASH-OUT" and newbalanceOrig > oldbalanceOrg:
    balance_mismatch = 1

elif type_input in ["DEBIT", "PAYMENT"] and newbalanceOrig != oldbalanceOrg - amount:
    balance_mismatch = 1

elif type_input == "TRANSFER":
    if newbalanceOrig != oldbalanceOrg - amount or newbalanceDest != oldbalanceDest + amount:
        balance_mismatch = 1

elif amount > 1e6:
    balance_mismatch = 1


input_data = np.array([[
    step,
    type_encoded,
    amount,
    oldbalanceOrg,
    newbalanceOrig,
    oldbalanceDest,
    newbalanceDest,
    OrigBalanceChange,
    DestBalanceChange,
    amount_to_oldOrig,
    amount_to_oldDest,
    dest_is_customer,
    log_amount,
    balance_mismatch
]])

if st.button("Predict Fraud Status"):

    if balance_mismatch == 1:
        prediction = 1
        probability = 1.0
    else:
        prediction = model.predict(input_data)[0]
        probability = model.predict_proba(input_data)[0][1] if hasattr(model, "predict_proba") else None

    st.subheader("Prediction Result")
    if prediction == 1:
        st.error("ðŸš¨ This transaction is **FRAUDULENT**.")
    else:
        st.success("âœ… This transaction appears **GENUINE**.")

    if probability is not None:
        st.info(f"Fraud Probability: **{probability * 100:.2f}%**")

st.markdown("---")

