# -*- coding: utf-8 -*-
"""Fraud Detection App Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p59bhLH6BgEcnsN1pu7JFwAXH8-Z5uOy
"""

import streamlit as st
import numpy as np
import joblib
import math

model = joblib.load("fraud_detection.pkl")

st.set_page_config(page_title="Fraud Detection System", page_icon="ðŸ’³", layout="centered")
st.title("ðŸ’³ Real-Time Fraud Detection System")
st.write("Predict whether a transaction is **Fraudulent or Genuine**")

st.subheader("Enter Transaction Details")

col1, col2 = st.columns(2)

with col1:
    type_input = st.selectbox(
        "Transaction Type",
        ["CASH-IN", "CASH-OUT", "DEBIT", "PAYMENT", "TRANSFER"]
    )
    amount = st.number_input("Transaction Amount", min_value=0.0, step=100.0)
    oldbalanceOrg = st.number_input("Old Balance (Origin)", min_value=0.0, step=100.0)
    newbalanceOrig = st.number_input("New Balance (Origin)", min_value=0.0, step=100.0)

with col2:
    oldbalanceDest = st.number_input("Old Balance (Destination)", min_value=0.0, step=100.0)
    newbalanceDest = st.number_input("New Balance (Destination)", min_value=0.0, step=100.0)
    dest_is_customer = st.selectbox("Is Destination a Customer?", ["Yes", "No"])

OrigBalanceChange = oldbalanceOrg - newbalanceOrig - amount
DestBalanceChange = newbalanceDest - oldbalanceDest - amount

amount_to_oldOrig = amount / (oldbalanceOrg + 1)
amount_to_oldDest = amount / (oldbalanceDest + 1)

log_amount = math.log(amount + 1)

# Encode categorical and binary values
type_map = {"CASH-IN": 0, "CASH-OUT": 1, "DEBIT": 2, "PAYMENT": 3, "TRANSFER": 4}
type_encoded = type_map[type_input]
dest_is_customer = 1 if dest_is_customer == "Yes" else 0

input_data = np.array([[
    type_encoded,
    amount,
    oldbalanceOrg,
    newbalanceOrig,
    oldbalanceDest,
    newbalanceDest,
    OrigBalanceChange,
    DestBalanceChange,
    amount_to_oldOrig,
    amount_to_oldDest,
    log_amount,
    dest_is_customer
]])

if st.button("Predict Fraud Status"):
    prediction = model.predict(input_data)[0]
    probability = model.predict_proba(input_data)[0][1] if hasattr(model, "predict_proba") else None

    st.subheader("Prediction Result")
    if prediction == 1:
        st.error("ðŸš¨ This transaction is **FRAUDULENT**.")
    else:
        st.success("âœ… This transaction appears **GENUINE**.")

    if probability is not None:
        st.info(f"Fraud Probability: **{probability * 100:.2f}%**")

st.markdown("---")
st.caption("Developed by Kartika â€¢ Fraud Detection ML Model using Logistic Regression")

